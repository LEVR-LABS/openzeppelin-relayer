name: Openzeppelin Relayer CI/CD Pipeline
on:
    push:
        branches: [main, devops]
        # paths:
        #     - "oracle/core/**"

# Global environment variables
env:
    ECR_REPOSITORY_APP: levr-v1-openzeppelin-relayer
    APP_DIR: "${{ github.workspace }}"
    BUCKET_NAME: levr-v1-openzeppelin-relayers-config
    LAMBDA_FUNCTION_NAME: upload_to_efs
jobs:
    build-and-push-ecr:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set unique Docker image tag
              id: set-tag
              run: echo "::set-output name=TAG::$(date '+%Y%m%d%H%M%S')-${{ github.run_id }}"

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Generate config file
              id: generate-config
              run: |
                  mv ${APP_DIR}/config/config.levr.json ${APP_DIR}/config/config.json
                  ls -al ${APP_DIR}/config
                  sed -i "s|MONAD_TESTNET_RPC_URL_1|${{ secrets.MONAD_TESTNET_RPC_URL_1 }}|g" ${APP_DIR}/config/config.json
                  cat ${APP_DIR}/config/config.json
                  echo "PAYLOAD=$(jq -c . ${APP_DIR}/config/config.json)" >> $GITHUB_OUTPUT


            - name: Upload to EFS via Lambda
              run: | 
                aws lambda invoke \
                  --function-name upload_to_efs \
                  --cli-binary-format raw-in-base64-out \
                  --payload '${{ steps.generate-config.outputs.PAYLOAD }}' \
                  response.json
                  
                echo "Response:"
                cat response.json
                
                # Check response
                if grep -q '"statusCode": 200' response.json; then
                  echo "‚úÖ Config uploaded successfully to EFS"
                else
                  echo "‚ùå Upload failed"
                  cat response.json
                  exit 1
                fi

            - name: Upload networks folder files to EFS via Lambda
              run: |
                for file in ${APP_DIR}/networks/*; do
                  filename=$(basename "$file")
                  filepath="networks/$filename"
                  echo "üì§ Uploading $filepath"
                  echo "File name: $filename"

                  PAYLOAD=$(jq -n \
                    --arg filename "$filepath" \
                    --argjson payload "$(cat "$file")" \
                    '{filename: $filename, payload: $payload}')

                  aws lambda invoke \
                    --function-name upload_to_efs \
                    --cli-binary-format raw-in-base64-out \
                    --payload "$PAYLOAD" \
                    response.json

                  echo "Response for $filepath:"
                  cat response.json

                  if grep -q '"statusCode": 200' response.json; then
                    echo "‚úÖ $filepath uploaded successfully to EFS"
                  else
                    echo "‚ùå Upload failed for $filepath"
                    cat response.json
                    exit 1
                  fi
                done

            # - name: Build and Push Docker Image to ECR (main)
            #   uses: docker/build-push-action@v2
            #   with:
            #       context: .
            #       file: ./Dockerfile.production
            #       push: true
            #       tags: ${{ secrets.V1_DEV_AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/levr-v1-openzeppelin-relayer:${{ steps.set-tag.outputs.TAG }}, ${{ secrets.V1_DEV_AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/levr-v1-openzeppelin-relayer:latest

